// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT
// file at the top-level directory of this distribution and at
// http://rust-lang.org/COPYRIGHT.
//
// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or
// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license
// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your
// option. This file may not be copied, modified, or distributed
// except according to those terms.

use syntax::ast;
use syntax::codemap;
use syntax::ext::base::{DummyResolver, ExtCtxt};
use syntax::ext::expand;
use syntax::parse;
use syntax::print::pprust::PrintState;
use syntax::print::pprust;

use aster::symbol::ToSymbol;

fn make_ext_ctxt<'a>(sess: &'a parse::ParseSess,
                     macro_loader: &'a mut DummyResolver) -> ExtCtxt<'a> {
    let info = codemap::ExpnInfo {
        call_site: codemap::DUMMY_SP,
        callee: codemap::NameAndSpan {
            format: codemap::MacroAttribute("test".to_symbol()),
            allow_internal_unstable: false,
            span: None
        }
    };

    let ecfg = expand::ExpansionConfig::default(String::new());

    let mut cx = ExtCtxt::new(&sess, ecfg, macro_loader);
    cx.bt_push(info);

    cx
}

#[test]
fn test_quote_tokens() {
    let sess = parse::ParseSess::new();
    let mut macro_loader = DummyResolver;
    let cx = make_ext_ctxt(&sess, &mut macro_loader);

    let tts = quote_tokens!(&cx, (+ 2 3));
    assert_eq!(pprust::tts_to_string(&tts), "( + 2 3 )");
}

#[test]
fn test_quote_ty() {
    let sess = parse::ParseSess::new();
    let mut macro_loader = DummyResolver;
    let cx = make_ext_ctxt(&sess, &mut macro_loader);

    let ty = quote_ty!(&cx, isize);
    assert_eq!(pprust::ty_to_string(&ty), "isize");
}

#[test]
fn test_quote_expr() {
    let sess = parse::ParseSess::new();
    let mut macro_loader = DummyResolver;
    let cx = make_ext_ctxt(&sess, &mut macro_loader);

    let expr = quote_expr!(&cx, 23);
    assert_eq!(pprust::expr_to_string(&expr), "23");

    let value = 24;
    let expr = quote_expr!(&cx, $value);
    assert_eq!(pprust::expr_to_string(&expr), "24i32");
}

#[test]
fn test_quote_stmt() {
    let sess = parse::ParseSess::new();
    let mut macro_loader = DummyResolver;
    let cx = make_ext_ctxt(&sess, &mut macro_loader);

    let stmt = quote_stmt!(&cx, let x = 20;).unwrap();
    assert_eq!(pprust::stmt_to_string(&stmt), "let x = 20;");
}

#[test]
fn test_quote_pat() {
    let sess = parse::ParseSess::new();
    let mut macro_loader = DummyResolver;
    let cx = make_ext_ctxt(&sess, &mut macro_loader);

    let pat = quote_pat!(&cx, Some(_));
    assert_eq!(pprust::pat_to_string(&pat), "Some(_)");
}

#[test]
fn test_quote_arm() {
    let sess = parse::ParseSess::new();
    let mut macro_loader = DummyResolver;
    let cx = make_ext_ctxt(&sess, &mut macro_loader);

    let arm = quote_arm!(&cx, (ref x, ref y) => (x, y),);
    assert_eq!(pprust::arm_to_string(&arm), " (ref x, ref y) => (x, y),");
}

#[test]
fn test_quote_attr() {
    let sess = parse::ParseSess::new();
    let mut macro_loader = DummyResolver;
    let cx = make_ext_ctxt(&sess, &mut macro_loader);

    let attr = quote_attr!(&cx, #![cfg(foo = "bar")]);
    assert_eq!(
        pprust::to_string(|s| s.print_attribute(&attr)),
        "#![cfg(foo = \"bar\")]");
}

#[test]
fn test_quote_block() {
    let sess = parse::ParseSess::new();
    let mut macro_loader = DummyResolver;
    let cx = make_ext_ctxt(&sess, &mut macro_loader);

    let block = quote_block!(&cx, {
        let x = 5;
        let y = 6;
        x + y
    }).ok().unwrap();

    assert_eq!(
        pprust::block_to_string(&block),
        "{ let x = 5; let y = 6; x + y }");
}

#[test]
fn test_quote_item() {
    let sess = parse::ParseSess::new();
    let mut macro_loader = DummyResolver;
    let cx = make_ext_ctxt(&sess, &mut macro_loader);

    let item = quote_item!(&cx, static x : int = 10;).unwrap();
    assert_eq!(pprust::item_to_string(&item), "static x: int = 10;");
}

#[test]
fn test_quote_impl_item() {
    let sess = parse::ParseSess::new();
    let mut macro_loader = DummyResolver;
    let cx = make_ext_ctxt(&sess, &mut macro_loader);

    let impl_item = quote_impl_item!(&cx, fn method(&mut self, x: u32) -> u32 { x });
    let impl_item = impl_item.ok().unwrap();
    assert_eq!(
        pprust::to_string(|s| s.print_impl_item(&impl_item)),
        "fn method(&mut self, x: u32) -> u32 { x }"
    );
}

#[test]
fn test_quote_matcher() {
    let sess = parse::ParseSess::new();
    let mut macro_loader = DummyResolver;
    let cx = make_ext_ctxt(&sess, &mut macro_loader);

    let tts = quote_matcher!(&cx, $($foo:tt,)* bar);
    assert_eq!(pprust::tts_to_string(&tts), "$($foo:tt,)* bar");
}

/*
#[test]
fn test_quote_where_clause() {
    let sess = parse::ParseSess::new();
    let mut macro_loader = DummyResolver;
    let cx = make_ext_ctxt(&sess, &mut macro_loader);

    let where_clause = quote_where_clause!(&cx, where A, B: T).ok().unwrap();

    assert_eq!(
        pprust::where_clause_to_string(&where_clause),
        "where A, B: T"
    );
}
*/

#[test]
fn test_quote_with_macro() {
    let sess = parse::ParseSess::new();
    let mut macro_loader = DummyResolver;
    let cx = make_ext_ctxt(&sess, &mut macro_loader);

    let block = quote_block!(&cx, {
        macro_rules! value { () => 6 }
        value!()
    }).ok().unwrap();

    // FIXME: Rust 1.2 and nightly pretty print slightly differently.
    // assert_eq!(
    //    pprust::block_to_string(&block),
    //    "{\n    macro_rules! value((  ) => 6);\n    value!()\n}");

    let s = pprust::block_to_string(&block);
    assert!(
        s == "{\n    macro_rules! value((  ) => 6);\n    value!()\n}" ||
        s == "{\n    macro_rules! value((  ) => 6);\n    value!{ }\n}");

    // Make sure we don't expand macros in the quote.
    macro_rules! value { () => { 5i32 } }
    let block = quote_block!(&cx, { value!() }).ok().unwrap();

    // FIXME: Rust 1.2 and nightly pretty print slightly differently.
    assert_eq!(pprust::block_to_string(&block), "{ value!() }");
    //let s = pprust::block_to_string(&block);
    //assert!(s == "{ value!() }" || s == "{ value!{ } }");
}

#[test]
fn test_quote_with_generics_and_where_clause() {
    let sess = parse::ParseSess::new();
    let mut macro_loader = DummyResolver;
    let cx = make_ext_ctxt(&sess, &mut macro_loader);

    let builder = aster::AstBuilder::new();
    let generics = builder.generics()
        .ty_param("T")
            .trait_bound("Clone").build()
            .build()
        .build();

    let where_clause = ast::WhereClause {
        id: ast::DUMMY_NODE_ID,
        predicates: vec![
            ast::WherePredicate::BoundPredicate(
                ast::WhereBoundPredicate {
                    span: syntax::codemap::DUMMY_SP,
                    bound_lifetimes: vec![],
                    bounded_ty: builder.ty().id("T"),
                    bounds: vec![
                        ast::TraitTyParamBound(
                            ast::PolyTraitRef {
                                bound_lifetimes: vec![],
                                trait_ref: ast::TraitRef {
                                    path: builder.path().id("Clone").build(),
                                    ref_id: ast::DUMMY_NODE_ID,
                                },
                                span: syntax::codemap::DUMMY_SP,
                            },
                            ast::TraitBoundModifier::None,
                        ),
                    ],
                }
            ),
        ],
    };

    let item = quote_item!(&cx,
        impl $generics Clone for Foo $where_clause {}
    ).unwrap();

    assert_eq!(
        pprust::item_to_string(&item),
        "impl <T: Clone> Clone for Foo where T: Clone { }"
    );
}

#[test]
fn test_stmt_semicolons() {
    let sess = parse::ParseSess::new();
    let mut macro_loader = DummyResolver;
    let cx = make_ext_ctxt(&sess, &mut macro_loader);

    let mut stmts = Vec::new();
    stmts.push(quote_stmt!(&cx, "let x = 1;"));
    stmts.push(quote_stmt!(&cx, "let y = 2;"));

    quote_block!(&cx, {
        $stmts
    }).ok().unwrap();
}

#[test]
fn test_sequence_repetitions() {
    let sess = parse::ParseSess::new();
    let mut macro_loader = DummyResolver;
    let cx = make_ext_ctxt(&sess, &mut macro_loader);


    let mut exprs = Vec::new();
    exprs.push(quote_expr!(&cx, 1 + 2));
    exprs.push(quote_expr!(&cx, 2 * 3));
    let exprs = exprs.into_iter();

    let expr = quote_expr!(&cx,
        ( $($exprs),* )
    );

    assert_eq!(pprust::expr_to_string(&expr), "(1 + 2, 2 * 3)");
}

#[test]
fn test_zipped_sequence_repetitions_with_lockstep_iter() {
    let sess = parse::ParseSess::new();
    let mut macro_loader = DummyResolver;
    let cx = make_ext_ctxt(&sess, &mut macro_loader);


    let a: Vec<i32> = vec![1, 2, 3];
    let b: Vec<i32> = vec![11, 22, 33];
    let a = a.into_iter();
    let b = b.into_iter();

    let expr = quote_expr!(&cx,
        ( $($a + $b),* )
    );

    assert_eq!(pprust::expr_to_string(&expr), "(1i32 + 11i32, 2i32 + 22i32, 3i32 + 33i32)");
}

#[test]
fn test_sequence_repetition_impls() {
    let sess = parse::ParseSess::new();
    let mut macro_loader = DummyResolver;
    let cx = make_ext_ctxt(&sess, &mut macro_loader);


    let mut exprs = Vec::new();
    exprs.push(quote_expr!(&cx, 1 + 2));
    exprs.push(quote_expr!(&cx, 2 * 3));
    let exprs2 = vec![exprs.iter(); 2].into_iter();
    let exprs = exprs.iter();
    let mut stmts = Vec::new();
    stmts.push(quote_stmt!(&cx, let x = 1;).unwrap());
    stmts.push(quote_stmt!(&cx, let y = 2;).unwrap());
    let stmts = vec![stmts.iter(); 2].into_iter();
    let unit = ();


    let expr = quote_expr!(&cx,
        ( $($unit, { $($stmts; $exprs2;)+ }, $exprs,)+ )
    );

    assert_eq!(pprust::expr_to_string(&expr),
               "((), { let x = 1; 1 + 2; let y = 2; 2 * 3; }, 1 + 2, (),\n \
                     { let x = 1; 1 + 2; let y = 2; 2 * 3; }, 2 * 3)");
}

#[test]
fn test_repeat_once() {
    let sess = parse::ParseSess::new();
    let mut macro_loader = DummyResolver;
    let cx = make_ext_ctxt(&sess, &mut macro_loader);

    let a = vec![1].into_iter();
    let b = vec![1].into_iter();
    let c = vec![1].into_iter();

    let expr = quote_expr!(&cx,
        ( $($a, $b, $c),+ )
    );
    assert_eq!(pprust::expr_to_string(&expr), "(1i32, 1i32, 1i32)");
}

#[test]
#[should_panic]
fn test_fail_unbounded_repetition() {
    let sess = parse::ParseSess::new();
    let mut macro_loader = DummyResolver;
    let cx = make_ext_ctxt(&sess, &mut macro_loader);

    let unit = ();

    quote_expr!(&cx,
        ( $($unit, ),* )
    );
}

#[test]
#[should_panic]
fn test_fail_repetition_different_lengths() {
    let sess = parse::ParseSess::new();
    let mut macro_loader = DummyResolver;
    let cx = make_ext_ctxt(&sess, &mut macro_loader);

    let a = 0..5;
    let b = 0..10;

    quote_expr!(&cx,
        ( $($a, $b),* )
    );
}

#[test]
#[should_panic]
fn test_fail_zero_length_repetition() {
    let sess = parse::ParseSess::new();
    let mut macro_loader = DummyResolver;
    let cx = make_ext_ctxt(&sess, &mut macro_loader);

    let a: Vec<i32> = vec![];
    let a = a.into_iter();

    quote_expr!(&cx,
        ( $($a),+ )
    );
}
